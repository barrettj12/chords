package gqlgen

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"

	"github.com/barrettj12/chords/gqlgen/types"
	"github.com/barrettj12/chords/src/data"
)

// Artist is the resolver for the artist field.
func (r *albumResolver) Artist(ctx context.Context, obj *types.Album) (*types.Artist, error) {
	return r.resolveArtist(r.DB.Artists(ctx, data.ArtistsFilters{
		Album: data.AlbumID(obj.ID),
	}))
}

// Songs is the resolver for the songs field.
func (r *albumResolver) Songs(ctx context.Context, obj *types.Album) ([]*types.Song, error) {
	return r.resolveSongs(r.DB.Songs(ctx, data.SongsFilters{
		Album: data.AlbumID(obj.ID),
	}))
}

// Albums is the resolver for the albums field.
func (r *artistResolver) Albums(ctx context.Context, obj *types.Artist) ([]*types.Album, error) {
	return r.resolveAlbums(r.DB.Albums(ctx, data.AlbumsFilters{
		Artist: data.ArtistID(obj.ID),
	}))
}

// RelatedArtists is the resolver for the relatedArtists field.
func (r *artistResolver) RelatedArtists(ctx context.Context, obj *types.Artist) ([]*types.Artist, error) {
	return r.resolveArtists(r.DB.Artists(ctx, data.ArtistsFilters{
		RelatedTo: data.ArtistID(obj.ID),
	}))
}

// Artists is the resolver for the artists field.
func (r *queryResolver) Artists(ctx context.Context) ([]*types.Artist, error) {
	return r.resolveArtists(r.DB.Artists(ctx, data.ArtistsFilters{}))
}

// Artist is the resolver for the artist field.
func (r *queryResolver) Artist(ctx context.Context, id string) (*types.Artist, error) {
	return r.resolveArtist(r.DB.Artists(ctx, data.ArtistsFilters{
		ID: data.ArtistID(id),
	}))
}

// Albums is the resolver for the albums field.
func (r *queryResolver) Albums(ctx context.Context) ([]*types.Album, error) {
	return r.resolveAlbums(r.DB.Albums(ctx, data.AlbumsFilters{}))
}

// Album is the resolver for the album field.
func (r *queryResolver) Album(ctx context.Context, id string) (*types.Album, error) {
	return r.resolveAlbum(r.DB.Albums(ctx, data.AlbumsFilters{
		ID: data.AlbumID(id),
	}))
}

// Songs is the resolver for the songs field.
func (r *queryResolver) Songs(ctx context.Context) ([]*types.Song, error) {
	return r.resolveSongs(r.DB.Songs(ctx, data.SongsFilters{}))
}

// Song is the resolver for the song field.
func (r *queryResolver) Song(ctx context.Context, id string) (*types.Song, error) {
	return r.resolveSong(r.DB.Songs(ctx, data.SongsFilters{
		ID: data.SongID(id),
	}))
}

// Artist is the resolver for the artist field.
func (r *songResolver) Artist(ctx context.Context, obj *types.Song) (*types.Artist, error) {
	return r.resolveArtist(r.DB.Artists(ctx, data.ArtistsFilters{
		Song: data.SongID(obj.ID),
	}))
}

// Album is the resolver for the album field.
func (r *songResolver) Album(ctx context.Context, obj *types.Song) (*types.Album, error) {
	return r.resolveAlbum(r.DB.Albums(ctx, data.AlbumsFilters{
		Song: data.SongID(obj.ID),
	}))
}

// Album returns AlbumResolver implementation.
func (r *Resolver) Album() AlbumResolver { return &albumResolver{r} }

// Artist returns ArtistResolver implementation.
func (r *Resolver) Artist() ArtistResolver { return &artistResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Song returns SongResolver implementation.
func (r *Resolver) Song() SongResolver { return &songResolver{r} }

type albumResolver struct{ *Resolver }
type artistResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type songResolver struct{ *Resolver }
